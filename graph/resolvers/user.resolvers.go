package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"crypto/rand"
	"math/big"

	graph "xyz.com/gqlgen-todos/graph/generator"
	"xyz.com/gqlgen-todos/graph/model"
)

// CreateUser is the resolver for the createUser field.

func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {

	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))

	user := &model.User{
		ID:   fmt.Sprintf("%d", randNumber),
		Name: input.Name,
	}
	r.users = append(r.users, user)
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	if len(r.users) == 0 {
		return nil, fmt.Errorf("no user found")
	}

	return r.users, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
